@page "/login"
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using GaleriaArteFrontend.Models
@using GaleriaArteFrontend.Services

<PageTitle>Iniciar Sesión - Galería de Arte</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h2>Iniciar Sesión</h2>
            <p>Accede a tu cuenta de Galería de Arte</p>
        </div>

        <div class="login-form">
            <EditForm Model="loginRequest" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label for="identificador">Usuario o Correo Electrónico</label>
                    <InputText id="identificador" @bind-Value="loginRequest.Identificador" class="form-control"
                        placeholder="Ingresa tu usuario o email" />
                    <ValidationMessage For="@(() => loginRequest.Identificador)" />
                </div>

                <div class="form-group">
                    <label for="password">Contraseña</label>
                    <div class="password-input">
                        <InputText id="password" @bind-Value="loginRequest.Contraseña"
                            type="@(mostrarPassword ? "text" : "password")" class="form-control"
                            placeholder="Ingresa tu contraseña" />
                        <button type="button" class="password-toggle" @onclick="TogglePasswordVisibility">
                            <i class="@(mostrarPassword ? "fas fa-eye-slash" : "fas fa-eye")"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => loginRequest.Contraseña)" />
                </div>

                @if (!string.IsNullOrEmpty(mensajeError))
                {
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-circle"></i>
                        @mensajeError
                    </div>
                }

                @if (!string.IsNullOrEmpty(mensajeExito))
                {
                    <div class="alert alert-success">
                        <i class="fas fa-check-circle"></i>
                        @mensajeExito
                    </div>
                }

                <button type="submit" class="btn btn-primary btn-login" disabled="@cargando">
                    @if (cargando)
                    {
                        <i class="fas fa-spinner fa-spin"></i>
                        <span>Iniciando sesión...</span>
                    }
                    else
                    {
                        <i class="fas fa-sign-in-alt"></i>
                        <span>Iniciar Sesión</span>
                    }
                </button>
            </EditForm>

            <div class="login-links">
                <a href="/recuperar-password" class="link-secondary">
                    <i class="fas fa-key"></i>
                    ¿Olvidaste tu contraseña?
                </a>

                <div class="register-link">
                    <span>¿No tienes cuenta?</span>
                    <a href="/registro" class="link-primary">
                        <i class="fas fa-user-plus"></i>
                        Regístrate aquí
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
    }

    .login-card {
        background: white;
        border-radius: 16px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 420px;
        overflow: hidden;
    }

    .login-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 40px 30px;
        text-align: center;
    }

    .login-header h2 {
        margin: 0 0 10px 0;
        font-size: 28px;
        font-weight: 600;
    }

    .login-header p {
        margin: 0;
        opacity: 0.9;
        font-size: 16px;
    }

    .login-form {
        padding: 40px 30px;
    }

    .form-group {
        margin-bottom: 24px;
    }

    .form-group label {
        display: block;
        margin-bottom: 8px;
        font-weight: 500;
        color: #374151;
        font-size: 14px;
    }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 16px;
        transition: all 0.3s ease;
        box-sizing: border-box;
    }

    .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .password-input {
        position: relative;
    }

    .password-toggle {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #6b7280;
        cursor: pointer;
        padding: 4px;
        font-size: 16px;
    }

    .password-toggle:hover {
        color: #374151;
    }

    .btn-login {
        width: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        padding: 14px 20px;
        border-radius: 8px;
        color: white;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        margin-bottom: 24px;
    }

    .btn-login:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
    }

    .btn-login:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    .login-links {
        text-align: center;
        border-top: 1px solid #e5e7eb;
        padding-top: 24px;
    }

    .login-links a {
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        font-size: 14px;
        font-weight: 500;
    }

    .link-secondary {
        color: #6b7280;
        margin-bottom: 16px;
        display: block;
    }

    .link-secondary:hover {
        color: #374151;
    }

    .register-link {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        font-size: 14px;
    }

    .register-link span {
        color: #6b7280;
    }

    .link-primary {
        color: #667eea;
    }

    .link-primary:hover {
        color: #4f46e5;
    }

    .alert {
        padding: 12px 16px;
        border-radius: 6px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
    }

    .alert-danger {
        background-color: #fef2f2;
        color: #dc2626;
        border: 1px solid #fecaca;
    }

    .alert-success {
        background-color: #f0fdf4;
        color: #16a34a;
        border: 1px solid #bbf7d0;
    }

    .validation-message {
        color: #dc2626;
        font-size: 12px;
        margin-top: 4px;
    }
</style>

@code {
    private LoginRequest loginRequest = new();
    private bool cargando = false;
    private bool mostrarPassword = false;
    private string mensajeError = "";
    private string mensajeExito = "";

    protected override async Task OnInitializedAsync()
    {
        // Verificar si ya está autenticado
        if (await AuthService.CheckAuthStateAsync())
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {

        Console.WriteLine($"SI ESTOY INGRESANDO AL HANDLE LOGIN");

        if (string.IsNullOrWhiteSpace(loginRequest.Identificador) ||
        string.IsNullOrWhiteSpace(loginRequest.Contraseña))
        {
            mensajeError = "Por favor, completa todos los campos.";
            return;
        }

        cargando = true;
        mensajeError = "";
        mensajeExito = "";

        try
        {
            var resultado = await AuthService.LoginAsync(loginRequest);
            if (resultado.Exito)
            {
                // Obtener el rol id del token
                var jwtService = new JwtService(JSRuntime);
                var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "jwt_token");
                var payload = jwtService.ObtenerPayload(token);
                var rolId = jwtService.ObtenerClaim(payload, "http://schemas.microsoft.com/ws/2008/06/identity/claims/role");


            Console.WriteLine($"Registro Requedsfgsdasdfst-----------------: {rolId}");

                // IDs de roles
                var artistaId = "9a66346f-164e-4ce2-8e5b-568b8f643799";
                var compradorId = "62d2b61f-d92b-44d8-ada8-9d5dace7e6bc";

                if (rolId == artistaId)
                {
                    mensajeExito = resultado.Mensaje;
                    await Task.Delay(1000);
                    Navigation.NavigateTo("/artista/panel");
                }
                else if (rolId == compradorId)
                {
                    mensajeExito = resultado.Mensaje;
                    await Task.Delay(1000);
                    Navigation.NavigateTo("/comprador/panel");
                }
                else
                {
                    mensajeError = "Rol no reconocido.";
                }
            }
            else
            {
                mensajeError = resultado.Mensaje;
            }
        }
        catch (Exception ex)
        {
            mensajeError = "Ocurrió un error inesperado. Por favor, intenta nuevamente más tarde.";
            Console.Error.WriteLine($"Error en el inicio de sesión: {ex.Message}");
        }
        finally
        {
            cargando = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        mostrarPassword = !mostrarPassword;
    }
}

