@page "/restablecer-password"
@page "/restablecer-password/{Token}"
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using GaleriaArteFrontend.Models
@using GaleriaArteFrontend.Services

<PageTitle>Restablecer Contraseña - Galería de Arte</PageTitle>

<div class="reset-container">
    <div class="reset-card">
        <div class="reset-header">
            <h2>Restablecer Contraseña</h2>
            <p>Crea una nueva contraseña segura</p>
        </div>

        <div class="reset-form">
            @if (!restablecimientoExitoso)
            {
                <EditForm Model="restablecerRequest" OnValidSubmit="HandleRestablecerPassword">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label for="nuevaPassword">Nueva Contraseña</label>
                        <div class="password-input">
                            <InputText id="nuevaPassword" @bind-Value="restablecerRequest.NuevaPassword"
                                type="@(mostrarPassword ? "text" : "password")" class="form-control"
                                placeholder="Mínimo 8 caracteres" />
                            <button type="button" class="password-toggle" @onclick="TogglePasswordVisibility">
                                <i class="@(mostrarPassword ? "fas fa-eye-slash" : "fas fa-eye")"></i>
                            </button>
                        </div>
                        <ValidationMessage For="@(() => restablecerRequest.NuevaPassword)" />
                        <div class="password-requirements">
                            <small>La contraseña debe tener al menos 8 caracteres</small>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="confirmarPassword">Confirmar Nueva Contraseña</label>
                        <div class="password-input">
                            <InputText id="confirmarPassword" @bind-Value="restablecerRequest.ConfirmarPassword"
                                type="@(mostrarConfirmPassword ? "text" : "password")" class="form-control"
                                placeholder="Repite tu nueva contraseña" />
                            <button type="button" class="password-toggle" @onclick="ToggleConfirmPasswordVisibility">
                                <i class="@(mostrarConfirmPassword ? "fas fa-eye-slash" : "fas fa-eye")"></i>
                            </button>
                        </div>
                        <ValidationMessage For="@(() => restablecerRequest.ConfirmarPassword)" />
                    </div>

                    @if (!string.IsNullOrEmpty(mensajeError))
                    {
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-circle"></i>
                            @mensajeError
                        </div>
                    }

                    <button type="submit" class="btn btn-primary btn-reset" disabled="@cargando">
                        @if (cargando)
                        {
                            <i class="fas fa-spinner fa-spin"></i>
                            <span>Restableciendo...</span>
                        }
                        else
                        {
                            <i class="fas fa-key"></i>
                            <span>Restablecer Contraseña</span>
                        }
                    </button>
                </EditForm>
            }
            else
            {
                <div class="success-message">
                    <div class="success-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <h3>¡Contraseña Restablecida!</h3>
                    <p>Tu contraseña ha sido actualizada exitosamente.</p>
                    <p>Ya puedes iniciar sesión con tu nueva contraseña.</p>

                    <button @onclick="IrAlLogin" class="btn btn-primary">
                        <i class="fas fa-sign-in-alt"></i>
                        Iniciar Sesión
                    </button>
                </div>
            }

            <div class="reset-links">
                <a href="/login" class="link-secondary">
                    <i class="fas fa-arrow-left"></i>
                    Volver al Login
                </a>

                <div class="register-link">
                    <span>¿No tienes cuenta?</span>
                    <a href="/registro" class="link-primary">
                        <i class="fas fa-user-plus"></i>
                        Regístrate aquí
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .reset-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
    }

    .reset-card {
        background: white;
        border-radius: 16px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 480px;
        overflow: hidden;
    }

    .reset-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 40px 30px;
        text-align: center;
    }

    .reset-header h2 {
        margin: 0 0 10px 0;
        font-size: 28px;
        font-weight: 600;
    }

    .reset-header p {
        margin: 0;
        opacity: 0.9;
        font-size: 16px;
    }

    .reset-form {
        padding: 40px 30px;
    }

    .form-group {
        margin-bottom: 24px;
    }

    .form-group label {
        display: block;
        margin-bottom: 8px;
        font-weight: 500;
        color: #374151;
        font-size: 14px;
    }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 16px;
        transition: all 0.3s ease;
        box-sizing: border-box;
    }

    .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .password-input {
        position: relative;
    }

    .password-toggle {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #6b7280;
        cursor: pointer;
        padding: 4px;
        font-size: 16px;
    }

    .password-toggle:hover {
        color: #374151;
    }

    .help-text {
        margin-top: 4px;
    }

    .help-text small {
        color: #6b7280;
        font-size: 12px;
    }

    .password-requirements {
        margin-top: 4px;
    }

    .password-requirements small {
        color: #6b7280;
        font-size: 12px;
    }

    .btn-reset {
        width: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        padding: 14px 20px;
        border-radius: 8px;
        color: white;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        margin-bottom: 24px;
    }

    .btn-reset:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
    }

    .btn-reset:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    .success-message {
        text-align: center;
        padding: 20px 0;
    }

    .success-icon {
        font-size: 4rem;
        color: #16a34a;
        margin-bottom: 20px;
    }

    .success-message h3 {
        color: #374151;
        margin-bottom: 16px;
        font-size: 24px;
    }

    .success-message p {
        color: #6b7280;
        margin-bottom: 16px;
        font-size: 16px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        padding: 14px 20px;
        border-radius: 8px;
        color: white;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        margin: 24px auto 0 auto;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
    }

    .reset-links {
        text-align: center;
        border-top: 1px solid #e5e7eb;
        padding-top: 24px;
    }

    .reset-links a {
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        font-size: 14px;
        font-weight: 500;
    }

    .link-secondary {
        color: #6b7280;
        margin-bottom: 16px;
        display: block;
    }

    .link-secondary:hover {
        color: #374151;
    }

    .register-link {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        font-size: 14px;
    }

    .register-link span {
        color: #6b7280;
    }

    .link-primary {
        color: #667eea;
    }

    .link-primary:hover {
        color: #4f46e5;
    }

    .alert {
        padding: 12px 16px;
        border-radius: 6px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
    }

    .alert-danger {
        background-color: #fef2f2;
        color: #dc2626;
        border: 1px solid #fecaca;
    }

    .validation-message {
        color: #dc2626;
        font-size: 12px;
        margin-top: 4px;
    }
</style>

@code {
    [Parameter] public string? Token { get; set; }

    private RestablecerPasswordRequest restablecerRequest = new();
    private bool cargando = false;
    private bool restablecimientoExitoso = false;
    private bool mostrarPassword = false;
    private bool mostrarConfirmPassword = false;
    private string mensajeError = "";

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Token))
        {
            if (Guid.TryParse(Token, out var tokenGuid))
            {
                restablecerRequest.Token = tokenGuid;
            }
        }
    }

    private async Task HandleRestablecerPassword()
    {
        mensajeError = "";

        if (restablecerRequest.Token == Guid.Empty)
        {
            mensajeError = "Token de recuperación inválido o ausente en la URL.";
            return;
        }

        if (string.IsNullOrWhiteSpace(restablecerRequest.NuevaPassword))
        {
            mensajeError = "Por favor, ingresa tu nueva contraseña.";
            return;
        }

        if (restablecerRequest.NuevaPassword.Length < 8)
        {
            mensajeError = "La contraseña debe tener al menos 8 caracteres.";
            return;
        }

        if (restablecerRequest.NuevaPassword != restablecerRequest.ConfirmarPassword)
        {
            mensajeError = "Las contraseñas no coinciden.";
            return;
        }

        cargando = true;

        try
        {
            var resultado = await AuthService.RestablecerPasswordAsync(restablecerRequest);

            if (resultado.Exito)
            {
                restablecimientoExitoso = true;
            }
            else
            {
                mensajeError = resultado.Mensaje;
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"Error inesperado: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        mostrarPassword = !mostrarPassword;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        mostrarConfirmPassword = !mostrarConfirmPassword;
    }

    private void IrAlLogin()
    {
        Navigation.NavigateTo("/login");
    }
}
