@page "/artista/editar-obra/{id:int}"
@using GaleriaArteFrontend.Models
@using Microsoft.AspNetCore.Components.Forms
@using GaleriaArteFrontend.Components
@inject GaleriaArteFrontend.Services.ObrasService ObrasService
@inject NavigationManager Navigation

@using GaleriaArteFrontend.Components

<AuthGuard RolRequerido="9a66346f-164e-4ce2-8e5b-568b8f643799">
    <h3>Editar Obra</h3>

    <button class="btn btn-secondary mb-3" @onclick="VolverAlPanel">
        <i class="bi bi-arrow-left"></i> Volver al Panel
    </button>

    @if (obra == null)
    {
        <p>Cargando datos de la obra...</p>
    }
    else
    {
        <EditForm Model="obra" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="titulo" class="form-label">Título</label>
                <InputText id="titulo" class="form-control" @bind-Value="obra.Titulo" />
            </div>
            <div class="mb-3">
                <label for="descripcion" class="form-label">Descripción</label>
                <InputTextArea id="descripcion" class="form-control" @bind-Value="obra.Descripcion" />
            </div>
            <div class="mb-3">
                <label for="precio" class="form-label">Precio</label>
                <InputNumber id="precio" class="form-control" @bind-Value="obra.Precio" />
            </div>
            <button class="btn btn-primary" type="submit" disabled="@(isSubmitting)">Actualizar Obra</button>
            @if (isSubmitting)
            {
                <span class="ms-2">Actualizando...</span>
            }
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success mt-3">@successMessage</div>
            }
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }
        </EditForm>
    }
</AuthGuard>

@code {
    [Parameter]
    public int id { get; set; }

    private ObraEditarModel? obra;
    private string? successMessage;
    private string? errorMessage;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        var obraApi = await ObrasService.GetObraByIdAsync(id);
        if (obraApi != null)
        {
            obra = new ObraEditarModel
            {
                Titulo = obraApi.Titulo,
                Descripcion = obraApi.Descripcion,
                Precio = obraApi.Precio
            };
        }
    }

    private async Task HandleValidSubmit()
    {
        errorMessage = null;
        successMessage = null;
        isSubmitting = true;
        try
        {
            var result = await ObrasService.ActualizarObraAsync(id, obra!);
            if (result)
            {
                successMessage = "Obra actualizada exitosamente.";
                await Task.Delay(1200);
                Navigation.NavigateTo("/artista/panel");
            }
            else
            {
                errorMessage = "No se pudo actualizar la obra.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        isSubmitting = false;
    }

    private void VolverAlPanel()
    {
        Navigation.NavigateTo("/artista/panel");
    }

    public class ObraEditarModel
    {
        public string Titulo { get; set; } = string.Empty;
        public string? Descripcion { get; set; }
        public decimal Precio { get; set; }
    }
}
