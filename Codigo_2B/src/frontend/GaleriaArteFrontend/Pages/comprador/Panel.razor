@page "/comprador/panel"
@inject AuthService AuthService
@inject ObrasService ObrasService
@inject NavigationManager Navigation
@inject JwtService JwtService
@inject IJSRuntime JSRuntime
@using GaleriaArteFrontend.Services
@using GaleriaArteFrontend.Models
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Web

<div class="comprador-panel">
    <div class="container-fluid">
        <!-- Header del Panel -->
        <div class="panel-header">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h1 class="panel-title">
                        <i class="fas fa-shopping-cart"></i>
                        Panel del Comprador
                    </h1>
                    <p class="panel-subtitle">Explora y descubre obras de arte extraordinarias</p>
                </div>
                <div class="col-md-4 text-end">
                    <div class="stats-summary">
                        <div class="stat-item">
                            <span class="stat-number">@obrasActivas.Count</span>
                            <span class="stat-label">Obras Disponibles</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filtros de Búsqueda -->
        <div class="filters-section">
            <div class="row">
                <div class="col-md-4">
                    <div class="filter-group">
                        <label>Buscar por título o artista</label>
                        <input type="text" class="form-control" @bind="filtroTitulo" @onkeyup="FiltrarObras" 
                               placeholder="Buscar obras...">
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="filter-group">
                        <label>Ordenar por</label>
                        <select class="form-control" @bind="ordenamiento" @bind:after="OrdenarObras">
                            <option value="fecha_desc">Más recientes</option>
                            <option value="fecha_asc">Más antiguos</option>
                            <option value="precio_asc">Precio: menor a mayor</option>
                            <option value="precio_desc">Precio: mayor a menor</option>
                            <option value="titulo_asc">Título: A-Z</option>
                            <option value="titulo_desc">Título: Z-A</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="filter-group">
                        <label>Límite de obras</label>
                        <select class="form-control" @bind="limite" @bind:after="CargarObrasActivas">
                            <option value="10">10 obras</option>
                            <option value="20">20 obras</option>
                            <option value="50">50 obras</option>
                            <option value="100">100 obras</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="filter-group">
                        <label>&nbsp;</label>
                        <button class="btn btn-outline-secondary btn-clear" @onclick="LimpiarFiltros">
                            <i class="fas fa-times"></i>
                            Limpiar
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Lista de Obras -->
        @if (cargando)
        {
            <div class="loading-container">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
                <p>Cargando obras disponibles...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(mensajeError))
        {
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle"></i>
                @mensajeError
                <button class="btn btn-outline-danger btn-sm ms-2" @onclick="CargarObrasActivas">
                    <i class="fas fa-redo"></i>
                    Reintentar
                </button>
            </div>
        }
        else if (obrasFiltradas.Count == 0)
        {
            <div class="empty-state">
                <i class="fas fa-search"></i>
                <h3>No se encontraron obras</h3>
                <p>No hay obras que coincidan con los filtros seleccionados.</p>
                <button class="btn btn-primary" @onclick="LimpiarFiltros">
                    Ver todas las obras
                </button>
            </div>
        }
        else
        {
            <div class="obras-grid">
                <div class="row">
                    @foreach (var obra in obrasFiltradas)
                    {
                        <div class="col-xl-3 col-lg-4 col-md-6 mb-4">
                            <div class="obra-card">
                                <div class="obra-image">
                                    @if (!string.IsNullOrEmpty(obra.ArchivoBase64))
                                    {
                                        <img src="@($"data:image/jpeg;base64,{obra.ArchivoBase64}")" 
                                             alt="@obra.Titulo" class="img-fluid">
                                    }
                                    else
                                    {
                                        <div class="no-image">
                                            <i class="fas fa-image"></i>
                                            <span>Sin imagen</span>
                                        </div>
                                    }
                                    <div class="obra-overlay">
                                        <button class="btn btn-primary btn-view" @onclick="() => VerDetalleObra(obra.Id)">
                                            <i class="fas fa-eye"></i>
                                            Ver Detalles
                                        </button>
                                    </div>
                                </div>
                                <div class="obra-info">
                                    <h5 class="obra-titulo">@obra.Titulo</h5>
                                    <p class="obra-artista">
                                        <i class="fas fa-user"></i>
                                        @obra.ArtistaNickname
                                    </p>
                                    <div class="obra-details">
                                        <span class="obra-fecha">
                                            <i class="fas fa-calendar"></i>
                                            @obra.FechaPublicacion.ToString("dd/MM/yyyy")
                                        </span>
                                        <span class="obra-estado">
                                            <i class="fas fa-check-circle"></i>
                                            @obra.Estado
                                        </span>
                                    </div>
                                    @if (obra.Precio > 0)
                                    {
                                        <div class="obra-precio">
                                            <span class="precio">$@obra.Precio.ToString("N0")</span>
                                        </div>
                                    }
                                    <div class="obra-description">
                                        <p>@((obra.Descripcion?.Length > 100) ? obra.Descripcion.Substring(0, 100) + "..." : obra.Descripcion)</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

<style>
    .comprador-panel {
        padding: 2rem 0;
        min-height: 100vh;
        background-color: #f8f9fa;
    }

    .panel-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 3rem 2rem;
        border-radius: 12px;
        margin-bottom: 2rem;
    }

    .panel-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }

    .panel-subtitle {
        font-size: 1.2rem;
        opacity: 0.9;
        margin: 0;
    }

    .stats-summary {
        background: rgba(255, 255, 255, 0.1);
        padding: 1.5rem;
        border-radius: 8px;
        text-align: center;
    }

    .stat-item {
        display: flex;
        flex-direction: column;
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
    }

    .stat-label {
        font-size: 0.9rem;
        opacity: 0.9;
    }

    .filters-section {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
    }

    .filter-group {
        margin-bottom: 1rem;
    }

    .filter-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: #374151;
    }

    .form-control {
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        padding: 0.75rem 1rem;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        outline: none;
    }

    .btn-clear {
        width: 100%;
        border-radius: 8px;
        font-weight: 600;
    }

    .obras-grid {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .obra-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .obra-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .obra-image {
        position: relative;
        height: 250px;
        overflow: hidden;
    }

    .obra-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .obra-card:hover .obra-image img {
        transform: scale(1.05);
    }

    .no-image {
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background-color: #f3f4f6;
        color: #9ca3af;
    }

    .no-image i {
        font-size: 3rem;
        margin-bottom: 0.5rem;
    }

    .obra-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .obra-card:hover .obra-overlay {
        opacity: 1;
    }

    .btn-view {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        color: white;
        transition: all 0.3s ease;
    }

    .btn-view:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }

    .obra-info {
        padding: 1.5rem;
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .obra-titulo {
        font-size: 1.25rem;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 0.5rem;
        line-height: 1.4;
    }

    .obra-artista {
        color: #6b7280;
        margin-bottom: 1rem;
        font-weight: 500;
    }

    .obra-details {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .obra-fecha,
    .obra-estado {
        font-size: 0.875rem;
        color: #6b7280;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .obra-estado i {
        color: #059669;
    }

    .obra-precio {
        margin-bottom: 1rem;
    }

    .precio {
        font-size: 1.5rem;
        font-weight: 700;
        color: #059669;
    }

    .obra-description {
        margin-top: auto;
    }

    .obra-description p {
        color: #6b7280;
        font-size: 0.9rem;
        line-height: 1.5;
        margin: 0;
    }

    .loading-container {
        text-align: center;
        padding: 4rem 2rem;
    }

    .loading-container .spinner-border {
        width: 3rem;
        height: 3rem;
        margin-bottom: 1rem;
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .empty-state i {
        font-size: 4rem;
        color: #d1d5db;
        margin-bottom: 1rem;
    }

    .empty-state h3 {
        color: #374151;
        margin-bottom: 0.5rem;
    }

    .empty-state p {
        color: #6b7280;
        margin-bottom: 2rem;
    }

    .alert {
        border-radius: 8px;
        padding: 1rem 1.5rem;
        margin-bottom: 2rem;
    }

    @@media (max-width: 768px) {
        .panel-header {
            padding: 2rem 1rem;
        }

        .panel-title {
            font-size: 2rem;
        }

        .filters-section {
            padding: 1.5rem;
        }

        .obras-grid {
            padding: 1.5rem;
        }
    }
</style>

@code {
    private List<Obra> obrasActivas = new();
    private List<Obra> obrasFiltradas = new();
    private bool cargando = true;
    private string mensajeError = "";

    // Filtros
    private string filtroTitulo = "";
    private string ordenamiento = "fecha_desc";
    private int limite = 20;

    protected override async Task OnInitializedAsync()
    {
        await VerificarAutenticacion();
        await CargarObrasActivas();
    }

    private async Task VerificarAutenticacion()
    {
        await AuthService.CheckAuthStateAsync();
        
        if (!AuthService.EstaAutenticado)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        // Verificar que sea un comprador
        var token = await JwtService.ObtenerTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            var payload = JwtService.ObtenerPayload(token);
            if (payload != null)
            {
                var rolId = JwtService.ObtenerClaim(payload, "http://schemas.microsoft.com/ws/2008/06/identity/claims/role");
                var compradorId = "62d2b61f-d92b-44d8-ada8-9d5dace7e6bc";

                if (rolId != compradorId)
                {
                    Navigation.NavigateTo("/");
                    return;
                }
            }
        }
    }

    private async Task CargarObrasActivas()
    {
        try
        {
            cargando = true;
            mensajeError = "";

            obrasActivas = await ObrasService.GetObrasActivasAsync(limite);
            obrasFiltradas = new List<Obra>(obrasActivas);
            OrdenarObras();
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al cargar las obras: {ex.Message}";
            Console.Error.WriteLine($"Error al cargar obras: {ex}");
        }
        finally
        {
            cargando = false;
        }
    }

    private void FiltrarObras()
    {
        obrasFiltradas = obrasActivas.Where(obra =>
            (string.IsNullOrEmpty(filtroTitulo) || 
             obra.Titulo.Contains(filtroTitulo, StringComparison.OrdinalIgnoreCase) ||
             obra.ArtistaNickname.Contains(filtroTitulo, StringComparison.OrdinalIgnoreCase))
        ).ToList();

        OrdenarObras();
    }

    private void OrdenarObras()
    {
        obrasFiltradas = ordenamiento switch
        {
            "fecha_asc" => obrasFiltradas.OrderBy(o => o.FechaPublicacion).ToList(),
            "fecha_desc" => obrasFiltradas.OrderByDescending(o => o.FechaPublicacion).ToList(),
            "precio_asc" => obrasFiltradas.OrderBy(o => o.Precio).ToList(),
            "precio_desc" => obrasFiltradas.OrderByDescending(o => o.Precio).ToList(),
            "titulo_asc" => obrasFiltradas.OrderBy(o => o.Titulo).ToList(),
            "titulo_desc" => obrasFiltradas.OrderByDescending(o => o.Titulo).ToList(),
            _ => obrasFiltradas.OrderByDescending(o => o.FechaPublicacion).ToList()
        };

        StateHasChanged();
    }

    private void LimpiarFiltros()
    {
        filtroTitulo = "";
        ordenamiento = "fecha_desc";
        limite = 20;
        obrasFiltradas = new List<Obra>(obrasActivas);
        OrdenarObras();
    }

    private void VerDetalleObra(int obraId)
    {
        Navigation.NavigateTo($"/obra/{obraId}");
    }
}